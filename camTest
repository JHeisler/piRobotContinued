from socketIO_client import SocketIO, LoggingNamespace
import sys
import time
from threading import Thread
from importlib import import_module
import picamera
import os
import struct
import io

socketIO = SocketIO('192.168.1.129', 8080, LoggingNamespace)

while True:
    camera = picamera.PiCamera()
    camera.resolution = (640, 480)
    # Start a preview and let the camera warm up for 2 seconds
    camera.start_preview()
    time.sleep(2)

    stream = io.BytesIO()
    for foo in camera.capture_continuous(stream, 'jpeg'):
        stream.seek(0)
        socketIO.emit('vid', stream.read())

        # Reset the stream for the next capture
        stream.seek(0)
        stream.truncate()


#### Server Code, need namespaces?
from flask import Flask, render_template
from flask_socketio import SocketIO, emit
import logging
#logging.basicConfig(level=logging.DEBUG)

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app)


@app.route('/')
def index():
    return render_template('index.html')

@socketio.on('Mov')
def on_message(message):
    print(message)
    socketio.emit('movement', message)

@socketio.on('vid')
def on_vid(frame):
    socketio.emit('frame', frame)
    

if __name__ == '__main__':
    socketio.run(app)
    
#### HTML Script Addition
      imageSocket = io.connect( '192.168.1.:8080/vid', {
          'reconnect' : true,
          'reconnection delay' : 500,
      } );
      imageSocket.on( 'frame', update_image );

      function update_image( data ) {
        // console.log("Image Received");
        $( "#camera img" ).attr( 'src', 'data:image/jpg;base64,' + data );
      }
